name: Assign Project and Milestone

on:
  pull_request:
    types: [opened]
  issues:
    types: [opened]

jobs:
  assign-project-and-milestone:
    runs-on: ubuntu-latest
    steps:
      # 필수 도구 설치 (GitHub CLI와 jq)
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install gh jq -y

      # 프로젝트에 항목 추가
      - name: Assign Project
        run: |
          PROJECT_ID=$(gh api graphql -F query='
          query ($owner: String!, $repo: String!) {
            repository(owner: $owner, name: $repo) {
              projectsV2(first: 100) {
                nodes {
                  id
                  title
                }
              }
            }
          }' -F owner="${{ github.repository_owner }}" -F repo="${{ github.event.repository.name }}" \
          | jq -r '.data.repository.projectsV2.nodes[] | select(.title == "Heart Beat Flutter Project") | .id')

          if [ -n "$PROJECT_ID" ]; then
            ITEM_ID=$(jq -r ".${{ github.event_name }}.node_id" <<<"${{ toJson(github.event) }}")
            gh api graphql -F query='
            mutation ($projectId: ID!, $contentId: ID!) {
              addProjectV2ItemById(input: { projectId: $projectId, contentId: $contentId }) {
                item {
                  id
                }
              }
            }' -F projectId="$PROJECT_ID" -F contentId="$ITEM_ID"
          else
            echo "Error: Project ID not found."
            exit 1
          fi

      # 마일스톤에 항목 할당
      - name: Assign Milestone
        run: |
          MILESTONE_ID=$(gh api repos/${{ github.repository_owner }}/${{ github.event.repository.name }}/milestones \
            | jq -r '.[] | select(.title == "MVP") | .id')

          if [ -n "$MILESTONE_ID" ]; then
            if [ "${{ github.event_name }}" == "issues" ]; then
            echo "Event detected: issues"
              ISSUE_NUMBER="${{ github.event.issue.number }}"
            elif [ "${{ github.event_name }}" == "pull_request" ]; then
              echo "Event detected: pull_request"
              ISSUE_NUMBER="${{ github.event.pull_request.number }}"
            else
              echo "Error: Unsupported event name - ${{ github.event_name }}"
              exit 1
            fi
            gh issue edit "$ISSUE_NUMBER" --milestone "$MILESTONE_ID"
          else
            echo "Error: Milestone ID not found."
            exit 1
          fi

      # Flutter_Test 워크플로우 실행
      - name: Trigger Next Workflow
        run: |
          gh workflow run "Flutter_Test" --ref "${{ github.ref_name }}"
